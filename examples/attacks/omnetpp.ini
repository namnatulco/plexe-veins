[General]
eventlog-file = ${resultdir}/${configname}-${runnumber}.elog
snapshot-file = ${resultdir}/${configname}-${repetition}.sna
cmdenv-express-mode = true
num-rngs = 6

ned-path = .
network = scenario

##########################################################
# Simulation parameters #
##########################################################
debug-on-errors = true
print-undisposed = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

#let our modules decide when to stop the simulation
sim-time-limit = 1e6 s

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters #
##########################################################
*.obstacles.debug = false

##########################################################
# WorldUtility parameters #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
# TraCIScenarioManager parameters #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "Car"
*.manager.moduleName = "node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
# 11p specific parameters #
# #
# NIC-Settings #
##########################################################
*.connectionManager.pMax = 100mW
*.connectionManager.sat = -94dBm
*.connectionManager.alpha = 2.0
*.connectionManager.carrierFrequency = 5.890e9 Hz
*.connectionManager.sendDirect = true

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.phy80211p.sensitivity = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useThermalNoise = true
*.**.nic.phy80211p.thermalNoise = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
# Mobility #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895


##########################################################
# Seeds and PRNGs #
##########################################################
seed-set = ${repetition}
#seed-set =
#**.seed = ${ 72005, 42, 273210, 0, -1}
#**.seed = 72005

*.node[*].unicast.rng-0 = 1
*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/freeway.sumo.cfg"
#launch command. change sumo-gui with sumo depending on what you want to launch
#*.manager.commandLine = "sumo-gui --remote-port $port --seed $seed --configuration-file $configFile"
*.manager.commandLine = "sumo --remote-port $port --seed $seed --configuration-file $configFile"

##########################################################
# Common parameters #
##########################################################

**.numberOfCars = ${nCars = 8}
**.numberOfCarsPerPlatoon = ${platoonSize = 8}
**.numberOfLanes = ${nLanes = 1}

##########################################################
# Position helper #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.node[*].helper.nLanes = ${nLanes}
*.node[*].helper.platoonSize = ${platoonSize}
*.node[*].helper.nCars = ${nCars}

##########################################################
# Application #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true
#collect data for time
*.node[*].appl.simulationDuration = 60 s

##########################################################
# Communication protocols #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].prot.priority = ${priority = 2}
#packet size for platooning beacon
*.node[*].prot.packetSize = ${packetSize = 200}
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].unicast.packetLossRate = 0

##########################################################
# Traffic manager #
##########################################################

**.traffic_type = "PlatoonsTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#insert vehicles already at steady-state. distance depends on controller


#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

##########################################################
# Scenario common parameters #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = ${ploegH = 0.5}s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false

*.node[*].scenario.accHeadway = 0.1s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2}s

*.node[*].prot.fakeSpeed = ${fakeSpeed = ($attacker == 3)}
*.node[*].prot.fakeAcc = ${fakeAcc = ($attacker == 4)}
*.node[*].prot.fakePos = ${fakePos = ($attacker == 2)}

[Config SinusoidalNoAttack]

#### DOC
# This config is used to compare controller parameters.
# The leader behaves in the standard sinusoidal pattern defined by plexe's examples after 5 seconds.
# In the current setup, we only compare CACC with 3 spacings, PLOEG, and CONSENSUS.

repeat = 5

#controllers to be tested
**.numericController = ${controller = 1, 1, 1, 2, 3}
*.node[*].scenario.controller = ${sController = "CACC", "CACC", "CACC", "PLOEG", "CONSENSUS" ! controller}

#headway for (C)ACCs
**.headway = 0.1s

#Note: this parameter only affects controller 1, i.e., CACC, so we set the default value (5m) for the other controllers.
*.node[*].scenario.caccSpacing = ${CACCSpacing = 5, 12.5, 20, 5, 5 ! controller }m

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50, 80, 100, 120, 150}kmph

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph

*.node[*].scenario.startOscillating = 5 s

#attack types
*.node[*].appl.attackerType = ${attacker = 0}
*.node[*].prot.attackerType = ${attacker}

*.node[*].appl.attackStart = ${attackStart = 30}s
*.node[*].prot.attackStart = ${attackStart}s

*.node[*].prot.attackingNode = 3

*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
*.node[*].prot.shiftX = ${attackPos = 7} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${repetition}.sca

**.traffic.platoonInsertDistance = ${5, 12.5, 20, 2, 15 ! controller}m

**.traffic.platoonInsertHeadway = ${0, 0, 0, 0.5, 0.8 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

[Config SinusoidalJammingAttack]

#### DOC
# This config is used to analyze the jamming attack.
# Parameters to be analyzed are the start of the jamming time (attack effectiveness)
# and the effect of the attack on different controllers.

*.node[*].scenario.caccSpacing = ${CACCSpacing = 5, 12.5, 20, 5, 5 ! controller }m

repeat = 5

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50, 80, 100, 120, 150}kmph

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph

*.node[*].scenario.startOscillating = 5 s

#controllers to be tested
**.numericController = ${controller = 1, 1, 1, 2, 3}
*.node[*].scenario.controller = ${sController = "CACC", "CACC", "CACC", "PLOEG", "CONSENSUS" ! controller}

#headway for ACCs
**.headway = 0.1s

#attack types
*.node[*].appl.attackerType = ${attacker = 1}
*.node[*].prot.attackerType = ${attacker}

#*.node[*].appl.attackStart = ${attackStart = 30, 30.1, 30.2, 30.3, 30.4}s
*.node[*].appl.attackStart = ${attackStart = 30}s
*.node[*].prot.attackStart = ${attackStart}s

*.node[*].prot.attackingNode = 3

*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
*.node[*].prot.shiftX = ${attackPos = 7} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${repetition}.sca

**.traffic.platoonInsertDistance = ${5, 12.5, 20, 2, 15 ! controller}m

**.traffic.platoonInsertHeadway = ${0, 0, 0, 0.5, 0.8 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

[Config SinusoidalJammingDetail]

#### DOC
# This config is used to analyze the jamming attack.
# Parameters to be analyzed are the start of the jamming time (attack effectiveness)
# and the effect of the attack on different controllers.

*.node[*].scenario.caccSpacing = ${CACCSpacing = 5, 7, 9, 11, 13, 20, 5, 5 ! controller }m

repeat = 5

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50, 80, 100, 120, 150}kmph

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph

*.node[*].scenario.startOscillating = 5 s

#controllers to be tested
**.numericController = ${controller = 1, 1, 1, 1, 1, 1, 2, 3}
*.node[*].scenario.controller = ${sController = "CACC", "CACC", "CACC", "CACC", "CACC", "CACC", "PLOEG", "CONSENSUS" ! controller}

#headway for ACCs
**.headway = 0.1s

#attack types
*.node[*].appl.attackerType = ${attacker = 1}
*.node[*].prot.attackerType = ${attacker}

#*.node[*].appl.attackStart = ${attackStart = 30, 30.1, 30.2, 30.3, 30.4}s
*.node[*].appl.attackStart = ${attackStart = 30, 30.5, 31, 31.5, 32, 32.5}s
*.node[*].prot.attackStart = ${attackStart}s

*.node[*].prot.attackingNode = 3

*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
*.node[*].prot.shiftX = ${attackPos = 7} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackStart}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackStart}_${repetition}.sca

**.traffic.platoonInsertDistance = ${5, 7, 9, 11, 13, 20, 5, 5 ! controller}m

**.traffic.platoonInsertHeadway = ${0, 0, 0, 0, 0, 0, 0.5, 0.8 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

[Config InjectionAttack]
#### DOC
# This config investigates various data injection attacks.
# TODO

*.node[*].scenario.caccSpacing = ${CACCSpacing = 5, 20, 20, 20 ! controller }m

repeat = 5

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50, 100, 150}kmph

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph

*.node[*].scenario.startOscillating = 5 s

#controllers to be tested
**.numericController = ${controller = 1, 1, 2, 3}
*.node[*].scenario.controller = ${sController = "CACC", "CACC", "PLOEG", "CONSENSUS" ! controller}

#headway for ACCs
**.headway = 0.1s

#*.node[*].appl.attackStart = ${attackStart = 30, 30.1, 30.2, 30.3, 30.4}s
*.node[*].appl.attackStart = ${attackStart = 30}s
*.node[*].prot.attackStart = ${attackStart}s

*.node[*].prot.attackingNode = 3

**.traffic.platoonInsertDistance = ${5, 20, 2, 15 ! controller}m

**.traffic.platoonInsertHeadway = ${0, 0, 0.5, 0.8 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

[Config SinusoidalPosInjectionAttack]
extends = InjectionAttack

#attack types
*.node[*].appl.attackerType = ${attacker = 2}
*.node[*].prot.attackerType = ${attacker}

*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
*.node[*].prot.shiftX = ${attackPos = 3, 5, 7, 9, 11} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackPos}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackPos}_${repetition}.sca

[Config SinusoidalSpeedInjectionAttack]
extends = InjectionAttack

#attack types
*.node[*].appl.attackerType = ${attacker = 3}
*.node[*].prot.attackerType = ${attacker}

*.node[*].prot.maliciousSpeed = ${attackSpeed = -50, 0, 50, 100, 150}kmph
*.node[*].prot.shiftX = ${attackPos = 7} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackSpeed}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackSpeed}_${repetition}.sca

[Config SinusoidalAccInjectionAttack]
extends = InjectionAttack

#attack types
*.node[*].appl.attackerType = ${attacker = 4}
*.node[*].prot.attackerType = ${attacker}

*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
*.node[*].prot.shiftX = ${attackPos = 7} m
*.node[*].prot.maliciousAcc = ${attackAcc = -30, -10, 0, 10, 30 } mpss

output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackAcc}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${controller}_${CACCSpacing}_${attackAcc}_${repetition}.sca

#[Config SinusoidalCombinedInjectionAttack]
#extends = InjectionAttack
#
##attack types
#*.node[*].appl.attackerType = ${attacker = 5}
#*.node[*].prot.attackerType = ${attacker}
#
#*.node[*].prot.maliciousSpeed = ${attackSpeed = 150}kmph
#*.node[*].prot.shiftX = ${attackPos = 7} m
#*.node[*].prot.maliciousAcc = ${attackAcc = -30, -10, 0, 10, 30 } mpss
#
#output-vector-file = ${resultdir}/${configname}_${leaderSpeed}_${attackAcc}_${controller}_${repetition}.vec
#output-scalar-file = ${resultdir}/${configname}_${leaderSpeed}_${attackAcc}_${controller}_${repetition}.sca

[Config Braking]

repeat = 1

#use the braking scenario
*.node[*].scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.brakingDeceleration = 8 mpsps
*.node[*].scenario.startBraking = 6 s


output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca
